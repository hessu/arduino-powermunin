#!/usr/bin/perl
#
# powermunind
# (c) Heikki Hannikainen 2012
#
# Script / daemon to read power measurement values (blink counts) from an
# Arduino and write them in a state file, to be consumed by a Munin plugin.
#
# License (same as Perl)
# ----------------------
#
# This is free software; you can redistribute it and/or modify it under the
# terms of either:
#
# a) the GNU General Public License as published by the Free Software
# Foundation; either version 1, or (at your option) any later version, or
#
# b) the "Artistic License".
#


use strict;
use warnings;

use Device::SerialPort;

my $dev = "/dev/ttyUSB0";
my $lockfile = "/var/lock/.LCK..ttyUSB0";
my $state = "/tmp/powermunin.state";

my %counts;

sub printout()
{
    my $tmpf = $state . ".tmp";
    open(F, ">$tmpf") || die "Could not open $tmpf: $!\n";
    foreach my $k (sort keys %counts) {
        print F "port$k.value $counts{$k}\n";
    }
    close(F) || die "Could not close $tmpf: $!\n";
    rename($tmpf, $state) || die "Could not rename $tmpf to $state: $!\n";
}

sub mainround()
{
    print "starting\n";
    my $port = new Device::SerialPort($dev, 0, $lockfile);
    if (!$port) {
        warn "Failed to open serial port: $!\n";
        return;
    }
    
    $port->databits(8);
    $port->baudrate(115200);
    $port->parity("none");
    $port->stopbits(1);
    $port->handshake("none");
    
    $port->read_char_time(0);    # don't wait for each character
    $port->read_const_time(500); # 0.5 second per unfulfilled "read" call
    
    readloop($port);
}

sub process($)
{
    my($s) = @_;
    
    $s =~ s/^[\r\n]+//s;
    #print "got: $s\n";
    while ($s =~ s/^(\d+)\s+(\d+)[\r\n]+//s) {
        if (!defined $counts{$1}) {
            $counts{$1} = $2;
        } else {
            $counts{$1} += $2;
        }
        #print "port $1 blinks $2 sum $counts{$1}\n";
    }
    
    printout();
}

sub readloop($)
{
    my($port) = @_;
    
    my $s = '';
    
    while (1) {
        my($count, $saw) = $port->read(255);
        if ($count > 0) {
            $s .= $saw;
            #print "$saw\n";
        }
        while ($s =~ s/^.*?\+(.*)\-//s) {
            process($1);
        }
    }
}

# main

while (1) {
    mainround();
    sleep(5);
}
